class Investor:
    """
    All the data about the investor.
    
    Takes information characteristic for the investor, i.e.: initial funds (unitless measure),
    strategy (greedy, cautious, neutral), luck (50% at standard), risk, profit and creates an instance
    of an investor
    
    Parameters:
    -----------------
    
    strategy: str = "Neutral"
        Defines investing strategy type, characteristic of an investor.
        
        Takes 3 values:
        - Greedy:
            1. Profit-to-Risk ratio (PTRR) drops with respect to gained funds.
            2. Accepts different types of PTRR behaviour: linear, sigmoidal
            3. Profit and Risk are more spread out.
            4. Risk is right skewed (values are negative), the more the higher the Profit.
               The Profit is left skewed.
            
        - Cautious:
            1. PTRR is grows with respect to gained funds
            2. Accepts different types of PTRR behaviour: linear, sigmoidal
            3. Profit and Risk are narrower, the more, the higher the funds.
            4. Risk is left skewed, Profit is right skewed.
            
        - Neutral:
            1. PTRR is independent of the gained funds
            2. Profit and Risk are symmetrically spread around their specific means.
            3. The spread of Profit or Risk are independent.
            
    initial_funds: int = 1000
        Initial sum of money to be invested.
        
    luck: float = 0.5
        A collective paramater dependent on proper investment entry, investment exit. Must be a value
        from range (0,1)
        
    risk: tuple = (mean: float = 0.05, low: float = 0.045, high: float = 0.055)
        Acceptable risk for each investment. Takes a tuple of risk values to produce a beta
        distribution with mean, low and high values.
    
    profit: tuple = (mean: float = 0.1, low: float = 0.09, high: float = 0.11)
        Acceptable profit for each investment. Takes a tuple of profit values to produce a beta
        distribution with mean, low and high values.
    
    single_sum: int = 150
        The value of a single investment.
        
    margin: float = 0.5
        Amount of money from the total funds not to be invested.
   
    Methods:
    -----------------
    
    invest_funds(n: int = 25, rounds: int = 100):
        Takes the value of investments and outputs the return of investment (ROI), final funds
        (amount after n rounds of investment), plot with the median, quartile etc. fields
        for the family of [rounds] investments.
    
    """
    
    properties = None
    
    def __init__(self, strategy: str="Neutral", initial_funds: int=1000, luck: float=0.5,
                 risk: tuple=(mean: float=0.05, low: float=0.045, high: float=0.055),
                 profit: tuple=(mean: float=0.1, low: float=0.09, high: float=0.11),
                 single_sum: int=150, margin: float=0.5):
        self.strategy = strategy
        self.initial_funds = initial_funds
        self.luck = luck
        self.risk = risk
        self.profit = profit
        self.single_sum = single_sum
        self.margin = margin
        
        self.properties = dict([("strategy", self.strategy), ("initial_funds", self.initial_funds),
                                ("luck", self.luck), ("risk", self.risk), ("profit", self.profit),
                                ("single_sum", self.single_sum), ("margin", self.margin)])
    
    # PTRR method for calculating Profit-to_Risk Ratio for arbitrary funds
    
    def PTRR(funds: float=self.initial_funds, initial_funds: float = self.initial_funds,
             profit: float = self.profit[0], risk: float = self.risk[0], model: str = "linear",
             gamble_limit: float = 10*self.initial_funds, drop: float = 0.001):
    """
    Calculates the Profit-to-risk ratio under specified boundary conditions.
    The default values corrrspond to the "Greedy" strategy, with two models available:
    linear and logistic.
    
    Parameters:
    -----------
    
    funds: float
        Value at which the PTRR for the next transaction is to be computed
    
    initial_funds: float
        Starting value at which PTRR is equal to the intial profit/risk.
        
    profit: float
        Expected profit from the investment when funds = intial_funds.
        
    risk: float
        Expected risk on the investment when funds = intial_funds.
        
    model: str = "linear" or "logistic"
        Model to calculate future PTRR:
        - linear - use linear function; defaults to drop rate such that PTRR = 1 at gamble_limit
        - logistic - use logistic function; defaults to drop rate such that PTRR = 0.5*initial PTRR at gamble_limit
    
    gamble_limit: float
        Value at which PTRR equals:
        - 1 - model: "linear"
        - 0.5 intial PTRR - model: "logistic"
        
    drop: float = 0.001
        Drop rate coeficient for the logistic model.
        For values:
        - 0 < drop < 1 - stretches the curve along the funds axis, the more, the lower the value
        - drop >= 1 - returns a step function with a jump at gamble_limit
    """
    
    # Check for the properess of the input
    
    PTRR_init = profit/risk
    
    change_coeff = - (PTRR_init - 1) / (gamble_limit)
    
    if funds < initial_funds:
        PTRR = PTRR_init
    else:
        if model == "linear":
            PTRR = PTRR_init + change_coeff*funds
        elif model == "logistic":
            PTRR_0 = 1 - special.expit(drop * (- gamble_limit - initial_funds))
            PTRR = 2*(0.5*PTRR_init)*(PTRR_0**(-1)) * (1 - special.expit(drop * (funds - gamble_limit - initial_funds)))
            
    return PTRR
