class Investor:
    """
    All the data about the investor.
    
    Takes information characteristic for the investor, i.e.: initial funds (unitless measure),
    luck (50% at standard), risk, profit and creates an instance of an investor.
    
    Parameters:
    -----------------
    
    name: str
        Name of the investors instance.
    
    initial_funds: int = 1000
        Initial sum of money to be invested.
        
    luck: float = 0.5
        A collective paramater dependent on proper investment entry, investment exit. Must be a value
        from range (0,1)
    """
    
    def __init__(self, name: str, initial_funds: int=1000, luck: float=0.5):
        
        self.properties = None
        self.name = name
        self.initial_funds = initial_funds
        self.luck = luck
    
    
class Invest:
    
    """
    Takes the investor and adopts specified conditions (strategy, single_sum, risk, profit)
    to simulate the funds after n roundsof investment.
    
    Parameters:
    -----------
    
    strategy: str = "Neutral"
    Defines investing strategy type, characteristic of an investor.

    Takes 3 values:
    - Greedy:
        1. Profit-to-Risk ratio (PTRR) drops with respect to gained funds.
        2. Accepts different types of PTRR behaviour: linear, sigmoidal
        3. Profit and Risk are more spread out.
        4. Risk is right skewed (values are negative), the more the higher the Profit.
           The Profit is left skewed.

    - Cautious:
        1. PTRR is grows with respect to gained funds
        2. Accepts different types of PTRR behaviour: linear, sigmoidal
        3. Profit and Risk are narrower, the more, the higher the funds.
        4. Risk is left skewed, Profit is right skewed.

    - Neutral:
        1. PTRR is independent of the gained funds
        2. Profit and Risk are symmetrically spread around their specific means.
        3. The spread of Profit or Risk are independent.
    
    initial_risk: tuple = (mean: float = 0.05, low: float = 0.045, high: float = 0.055)
    Acceptable risk for each investment. Takes a tuple of risk values to produce a beta
    distribution with mean, low and high values.
    
    initial_profit: tuple = (mean: float = 0.1, low: float = 0.09, high: float = 0.11)
        Acceptable profit for each investment. Takes a tuple of profit values to produce a beta
        distribution with mean, low and high values.
    
    single_sum: int = 150
        The value of a single investment.
        
    margin: float = 0.5
        Amount of money from the total funds not to be invested.
        
    """
    
    def __init__(self, investor: Investor = None, strategy: str = "Neutral",
                 initial_risk: tuple=(0.05, 0.045, 0.055), initial_profit: tuple=(0.1, 0.09, 0.11),
                 single_sum: int=150, margin: float=0.5):
        
        self.investor = investor
        self.strategy = strategy
        self.initial_risk = initial_risk
        self.initial_profit = initial_profit
        self.single_sum = single_sum
        self.margin = margin
    
    # PTRR method for calculating Profit-to_Risk Ratio for arbitrary funds
    
    def PTRR(self, funds: list, cross_limit: float, model: str = "linear", drop: float = 0.001,
             limit: float = 1.0):
        
        """
        Calculates the Profit-to-risk ratio under specified boundary conditions.
        The default values correspond to the "Greedy" strategy, with two models available:
        linear and logistic.

        Parameters:
        -----------

        funds: float
            Value at which the PTRR for the next transaction is to be computed
            
        model: str = "linear" or "logistic"
            Model to calculate future PTRR:
            - linear - use linear function; defaults to drop rate such that PTRR = 1 at cross_limit
            - logistic - use logistic function; defaults to drop rate such that:
                - PTRR = 0.5*PTRR_init at cross_limit   -   "Greedy"
                - PTRR = PTRR_init + 0.5*(limit - PTRR_init) at cross_limit   -   "Cautious"

        cross_limit: float
            Value at which PTRR equals:
            - 1 - model: "linear"
            - 0.5 intial PTRR - model: "logistic"

        drop: float = 0.001
            Drop rate coeficient for the logistic model.
            For values:
            - 0 < drop < 1 - stretches the curve along the funds axis, the more, the lower the value
            - drop >= 1 - returns a step function with a jump at cross_limit
            
        limit: float = 1.0
            PTRR value to be reached by the model.
            Range depends on the model:
            - Greedy     0 < limit < PTRR_init
            - Neutral    ignored
            - Cautious   PTRR_init < limit
            
        """

        initial_funds = self.investor.initial_funds
        initial_profit = self.initial_profit[0]
        initial_risk = self.initial_risk[0]
        strategy = self.strategy
        
        # Check for the properess of the input

        PTRR_init = initial_profit / initial_risk
        PTRR = None
        
        if strategy == "Greedy":
            
            # Check for valid input calues
            if limit >= PTRR_init:
                raise Exception("Invalid limit. Expected limit<profit/risk for 'Greedy' strategy.")
                
            else:
                change_coeff = - (PTRR_init - 1) / (cross_limit - initial_funds)

                if funds[-1] <= initial_funds:
                    PTRR = PTRR_init
                else:
                    if model == "linear":

                        formula = PTRR_init + change_coeff*(funds[-1] - initial_funds)

                        # Set the limit
                        if formula >= PTRR_init:
                            raise Exception("Not greedy enough. The profit is too high with respect to risk.")

                        elif limit <= formula < PTRR_init:
                            PTRR = formula

                        elif formula < limit:
                            PTRR = limit

                    elif model == "logistic":
                        PTRR_0 = - special.expit(drop * (initial_funds - cross_limit - initial_funds))
                        PTRR = PTRR_init + (PTRR_init - limit) * (- PTRR_0 - special.expit(drop * (funds[-1] - cross_limit - initial_funds)))


        elif self.strategy == "Cautious":
            
            # Check for valid input calues
            if limit <= PTRR_init:
                raise Exception("Invalid limit. Expected limit>profit/risk for 'Cautious' strategy.")

            else:
                change_coeff = (PTRR_init - 1) / (cross_limit - initial_funds)

                if funds[-1] <= initial_funds:
                    PTRR = PTRR_init
                else:
                    if model == "linear":

                        formula = PTRR_init + change_coeff*(funds[-1] - initial_funds)

                        # Set the limit
                        if formula <= PTRR_init:
                            raise Exception("Not cautious enough. The profit is too small with respect to risk.")

                        elif PTRR_init <= formula < limit:
                            PTRR = formula

                        elif formula >= limit:
                            PTRR = limit

                    elif model == "logistic":
                        PTRR_0 = special.expit(drop * (initial_funds - cross_limit - initial_funds))
                        PTRR = PTRR_init + limit * (- PTRR_0 + special.expit(drop * (funds[-1] - cross_limit - initial_funds)))


        elif self.strategy == "Neutral":
            PTRR = PTRR_init
            
        else:
            raise Exception("Invalid strategy. Only 'Greedy', 'Neutral' and 'Cautious' accepted.")
            
        return PTRR
    
    def funds_spread(self, funds: float, l_rate: float, g_rate: float):
        """
        Computes the spread of profit and risk values based on current funds.
        
        Parameters:
        -----------
        
        funds: float
            Funds for which the spread will be computed.
        
        l_rate: float
            Rate for the change in losses spread with respect to funds per 1000.
            
        g_rate: float
            Rate for the change in gains spread with respect to funds per 1000.
        
        
        Returns:
        --------
        
        Tuple in format (losses_spread, gains_spread)
        
        """
        
        
        if self.strategy == "Neutral":
            value = (0,0)
        
        elif self.strategy == "Greedy":
            l_spread = 0.001 * l_rate * funds
            g_spread = 0.001 * g_rate * funds
            
            value = (l_spread, g_spread)
            
        elif self.strategy == "Cautious":
            value = (0,0)
        
        return value
    
    def outcome_spread(self, funds: float, l_rate: float, g_rate: float):
        """
        Computes the spread of profit and risk values based on the number of consecutive outcomes.
        
        Parameters:
        -----------
        
        funds: float
            Funds for which the spread will be computed.
        
        l_rate: float
            Rate for the change in losses spread with respect to the number of consecutive outcomes of one type.
            
        g_rate: float
            Rate for the change in gains spread with respect to the number of consecutive outcomes of one type.
        
        
        Returns:
        --------
        
        Tuple in format (losses_spread, gains_spread)
        
        """
        
        
        if self.strategy == "Neutral":
            value = (0,0)
        
        elif self.strategy == "Greedy":
            value = (0,0)
            
        elif self.strategy == "Cautious":
            l_spread = 2**(-l_rate * funds)
            g_spread = 2**(-g_rate * funds)
            
            value = (l_spread, g_spread)
        
        return value
    
    def funds_shift(self, funds: float, l_rate: float, g_rate: float):
        """
        Computes the shift of profit and risk values based on current funds.
        
        Parameters:
        -----------
        
        funds: float
            Funds for which the shift will be computed.
        
        l_rate: float
            Rate for the change in losses shift with respect to funds per 1000.
            
        g_rate: float
            Rate for the change in gains shift with respect to funds per 1000.
        
        
        Returns:
        --------
        
        Tuple in format (losses_shift, gains_shift)
        
        """
        
        
        if self.strategy == "Neutral":
            value = (0,0)
        
        elif self.strategy == "Greedy":
            l_shift = 0.001 * l_rate * funds
            g_shift = 0.001 * g_rate * funds
            
            value = (l_shift, g_shift)
            
        elif self.strategy == "Cautious":
            value = (0,0)
        
        return value
    
    def outcome_shift(self, num_outcomes: int, l_rate: float, g_rate: float):
        """
        Computes the shift of profit and risk values based on outcome of the transaction.
        
        Parameters:
        -----------
        
        num_outcomes: int
            Number of consecutive outcomes of the last transactions.
        
        l_rate: float
            Rate for the change in losses shift with respect to consecutive number of losses.
            For strategy = "Greedy" l_rate > g_rate.
            
        g_rate: float
            Rate for the change in gains shift with respect to consecutive number of gains.
            For strategy = "Greedy" g_rate < l_rate.
        
        Returns:
        --------
        
        Tuple in format (losses_shift, gains_shift)
        """
        
        
        # Check if the rates respect the condition for "Greedy" strategy
        if self.strategy == "Greedy":
            if l_rate <= g_rate:
                raise ValueError("Invalid rates. l_rate > g_rate for strategy = 'Greedy'.")
        
        if self.strategy == "Neutral":
            value = (0,0)
        
        elif self.strategy == "Greedy":
            l_shift = l_rate * num_outcomes
            g_shift = g_rate * num_outcomes
            
            value = (l_shift, g_shift)
            
        elif self.strategy == "Cautious":
            l_shift = -l_rate * num_outcomes
            g_shift = g_rate * num_outcomes
            
            value = (l_shift, g_shift)
        
        return value        
        
    
    def Invest_funds(self, n: int, cross_limit: float, model: str = "linear", drop: float = 0.001, limit: float = 1.0):
        
        """
        Returns the funds after n rounds of investment.
        """
        
        
        # Compute parameter 'b' to provide mode = mean
        def var_b(a, xmax, loc, scale):
    
            var_b = 1 + (a - 1) * (scale + loc - xmax) / (xmax - loc)
    
            return var_b
        
        # initialize shape parameters of the distribution
        
        # Profit parameters
        loc_profit = self.initial_profit[1]
        scale_profit = (self.initial_profit[2] - self.initial_profit[1])
        mode_profit = self.initial_profit[0]
        
        # Risk parameters
        loc_risk = self.initial_risk[1]
        scale_risk = (self.initial_risk[2] - self.initial_risk[1])
        mode_risk = self.initial_risk[0]
        
        a = 10
        b_risk = var_b(a, xmax=mode_risk, loc = loc_risk, scale = scale_risk)
        b_profit = var_b(a, xmax=mode_profit, loc = loc_profit, scale = scale_profit)

        # Update fund track with new gains or losses
        def update_fund_track(fund_track, losses_gains):
            
            if type(losses_gains) == np.ndarray:
                for f in losses_gains:
                    fund_track.append(fund_track[-1] + f)
            elif type(losses_gains) == np.float64:
                fund_track.append(fund_track[-1] + losses_gains)
            return fund_track
        
        # Invest according to the adopted strategy
        
        if self.strategy == "Neutral":
            
            
            # Initialize the parameters
            rounds_passed = 0
            total_invest_funds = self.investor.initial_funds
            fund_track = [self.investor.initial_funds]
            
            while rounds_passed < n:
                
                losses_gains = np.array([])
                
                # if the number of rounds is greater than remaining, then trim
                num_rounds = int(np.floor((total_invest_funds * self.margin) / self.single_sum))
                 
                if rounds_passed+num_rounds >= n:
                    # trim according to n
                    num_rounds = n - rounds_passed
                
                
                # compute the losses_gains
                profit_distribution = stats.beta.rvs(a=a, b=b_profit, loc = loc_profit,
                                                     scale = scale_profit, size = num_rounds)
                risk_distribution = -stats.beta.rvs(a=a, b=b_risk, loc = loc_risk,
                                                   scale = scale_risk, size = num_rounds)
                choice = np.random.choice([0, 1], size = num_rounds, p = [1-self.investor.luck, self.investor.luck])

                
                
                # pick loss or gain
                for i in range(len(choice)):
                    if choice[i] == 0:
                        new_loss = risk_distribution[i]
                        losses_gains = np.append(losses_gains, new_loss)

                    elif choice[i] == 1:
                        new_gain = profit_distribution[i]
                        losses_gains = np.append(losses_gains, new_gain)
                
                losses_gains = losses_gains * self.single_sum
                
                # Get the funds to invest
                total_invest_funds += sum(losses_gains)
                
                # Update the funds_track
                update_fund_track(fund_track, losses_gains)
                
                #update the rounds_passed
                rounds_passed += len(losses_gains)
                
            funds_number = pd.Series(list(range(n+1)))
            neutral_funds = pd.DataFrame(fund_track).set_index(pd.Index(funds_number))
            
            return neutral_funds
        
        elif self.strategy == "Greedy":
            
            # Initialize the parameters
            rounds_passed = 0
            total_invest_funds = self.investor.initial_funds * self.margin
            fund_track = [self.investor.initial_funds]
            
            # Profit parameters
            loc_profit = self.initial_profit[1]
            scale_profit = (self.initial_profit[2] - self.initial_profit[1])
            mode_profit = self.initial_profit[0]

            # Risk parameters
            loc_risk = self.initial_risk[1]
            scale_risk = (self.initial_risk[2] - self.initial_risk[1])
            mode_risk = self.initial_risk[0]
            
            while rounds_passed < n:
                
                losses_gains = None
                
                # Change profit/loss parameters with respect to the current funds
                current_PTRR = self.PTRR(fund_track, cross_limit=cross_limit, model=model, drop=drop, limit=limit)
                
                # Profit parameters
                loc_profit = self.initial_profit[1]
                scale_profit = (self.initial_profit[2] - self.initial_profit[1])
                mode_profit = self.initial_profit[0]

                # Risk parameters
                loc_risk = self.initial_risk[1]
                mode_risk = self.initial_profit[0] / current_PTRR
                scale_risk = (1.1*mode_risk - self.initial_risk[1])

                a = 10
                b_risk = var_b(a, xmax=mode_risk, loc = loc_risk, scale = scale_risk)
                b_profit = var_b(a, xmax=mode_profit, loc = loc_profit, scale = scale_profit)
                
                #print("a: {}\nb_risk: {}\nloc_risk: {}\nscale_risk: {}".format(a, b_risk, loc_risk, scale_risk))

                # compute the losses_gains
                profit_value = stats.beta.rvs(a=a, b=b_profit, loc = loc_profit, scale = scale_profit)
                risk_value = stats.beta.rvs(a=a, b=b_risk, loc = loc_risk, scale = scale_risk)
                choice = np.random.choice([0, 1], size = 1, p = [1-self.investor.luck, self.investor.luck])

                # pick loss or gain
                if choice == 0:
                    losses_gains = -risk_value

                else:
                    losses_gains = profit_value
                
                # Transform fractional loss/gain into fund value
                losses_gains = losses_gains * self.single_sum
                
                # Get the funds to invest
                total_invest_funds += losses_gains
                
                # Update the funds_track
                update_fund_track(fund_track, losses_gains)
                
                #update the rounds_passed
                rounds_passed += 1
                
            funds_number = pd.Series(list(range(n+1)))
            greedy_funds = pd.DataFrame(fund_track).set_index(pd.Index(funds_number))
            
            return greedy_funds
